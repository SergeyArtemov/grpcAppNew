// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Ydb/RateLimiter/V1/ydb_rate_limiter_v1.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ydb.RateLimiter.V1 {
  /// <summary>
  /// Control plane API
  /// </summary>
  public static partial class RateLimiterService
  {
    static readonly string __ServiceName = "Ydb.RateLimiter.V1.RateLimiterService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Ydb.RateLimiter.CreateResourceRequest> __Marshaller_Ydb_RateLimiter_CreateResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.CreateResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.CreateResourceResponse> __Marshaller_Ydb_RateLimiter_CreateResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.CreateResourceResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.AlterResourceRequest> __Marshaller_Ydb_RateLimiter_AlterResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.AlterResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.AlterResourceResponse> __Marshaller_Ydb_RateLimiter_AlterResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.AlterResourceResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.DropResourceRequest> __Marshaller_Ydb_RateLimiter_DropResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.DropResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.DropResourceResponse> __Marshaller_Ydb_RateLimiter_DropResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.DropResourceResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.ListResourcesRequest> __Marshaller_Ydb_RateLimiter_ListResourcesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.ListResourcesRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.ListResourcesResponse> __Marshaller_Ydb_RateLimiter_ListResourcesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.ListResourcesResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.DescribeResourceRequest> __Marshaller_Ydb_RateLimiter_DescribeResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.DescribeResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.DescribeResourceResponse> __Marshaller_Ydb_RateLimiter_DescribeResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.DescribeResourceResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.AcquireResourceRequest> __Marshaller_Ydb_RateLimiter_AcquireResourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.AcquireResourceRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.RateLimiter.AcquireResourceResponse> __Marshaller_Ydb_RateLimiter_AcquireResourceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.RateLimiter.AcquireResourceResponse.Parser));

    static readonly grpc::Method<global::Ydb.RateLimiter.CreateResourceRequest, global::Ydb.RateLimiter.CreateResourceResponse> __Method_CreateResource = new grpc::Method<global::Ydb.RateLimiter.CreateResourceRequest, global::Ydb.RateLimiter.CreateResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateResource",
        __Marshaller_Ydb_RateLimiter_CreateResourceRequest,
        __Marshaller_Ydb_RateLimiter_CreateResourceResponse);

    static readonly grpc::Method<global::Ydb.RateLimiter.AlterResourceRequest, global::Ydb.RateLimiter.AlterResourceResponse> __Method_AlterResource = new grpc::Method<global::Ydb.RateLimiter.AlterResourceRequest, global::Ydb.RateLimiter.AlterResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AlterResource",
        __Marshaller_Ydb_RateLimiter_AlterResourceRequest,
        __Marshaller_Ydb_RateLimiter_AlterResourceResponse);

    static readonly grpc::Method<global::Ydb.RateLimiter.DropResourceRequest, global::Ydb.RateLimiter.DropResourceResponse> __Method_DropResource = new grpc::Method<global::Ydb.RateLimiter.DropResourceRequest, global::Ydb.RateLimiter.DropResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DropResource",
        __Marshaller_Ydb_RateLimiter_DropResourceRequest,
        __Marshaller_Ydb_RateLimiter_DropResourceResponse);

    static readonly grpc::Method<global::Ydb.RateLimiter.ListResourcesRequest, global::Ydb.RateLimiter.ListResourcesResponse> __Method_ListResources = new grpc::Method<global::Ydb.RateLimiter.ListResourcesRequest, global::Ydb.RateLimiter.ListResourcesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListResources",
        __Marshaller_Ydb_RateLimiter_ListResourcesRequest,
        __Marshaller_Ydb_RateLimiter_ListResourcesResponse);

    static readonly grpc::Method<global::Ydb.RateLimiter.DescribeResourceRequest, global::Ydb.RateLimiter.DescribeResourceResponse> __Method_DescribeResource = new grpc::Method<global::Ydb.RateLimiter.DescribeResourceRequest, global::Ydb.RateLimiter.DescribeResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeResource",
        __Marshaller_Ydb_RateLimiter_DescribeResourceRequest,
        __Marshaller_Ydb_RateLimiter_DescribeResourceResponse);

    static readonly grpc::Method<global::Ydb.RateLimiter.AcquireResourceRequest, global::Ydb.RateLimiter.AcquireResourceResponse> __Method_AcquireResource = new grpc::Method<global::Ydb.RateLimiter.AcquireResourceRequest, global::Ydb.RateLimiter.AcquireResourceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcquireResource",
        __Marshaller_Ydb_RateLimiter_AcquireResourceRequest,
        __Marshaller_Ydb_RateLimiter_AcquireResourceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ydb.RateLimiter.V1.YdbRateLimiterV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for RateLimiterService</summary>
    public partial class RateLimiterServiceClient : grpc::ClientBase<RateLimiterServiceClient>
    {
      /// <summary>Creates a new client for RateLimiterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RateLimiterServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RateLimiterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RateLimiterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RateLimiterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RateLimiterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new resource in existing coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.CreateResourceResponse CreateResource(global::Ydb.RateLimiter.CreateResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new resource in existing coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.CreateResourceResponse CreateResource(global::Ydb.RateLimiter.CreateResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateResource, null, options, request);
      }
      /// <summary>
      /// Create a new resource in existing coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.CreateResourceResponse> CreateResourceAsync(global::Ydb.RateLimiter.CreateResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new resource in existing coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.CreateResourceResponse> CreateResourceAsync(global::Ydb.RateLimiter.CreateResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateResource, null, options, request);
      }
      /// <summary>
      /// Update a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.AlterResourceResponse AlterResource(global::Ydb.RateLimiter.AlterResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.AlterResourceResponse AlterResource(global::Ydb.RateLimiter.AlterResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AlterResource, null, options, request);
      }
      /// <summary>
      /// Update a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.AlterResourceResponse> AlterResourceAsync(global::Ydb.RateLimiter.AlterResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.AlterResourceResponse> AlterResourceAsync(global::Ydb.RateLimiter.AlterResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AlterResource, null, options, request);
      }
      /// <summary>
      /// Delete a resource from coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.DropResourceResponse DropResource(global::Ydb.RateLimiter.DropResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a resource from coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.DropResourceResponse DropResource(global::Ydb.RateLimiter.DropResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropResource, null, options, request);
      }
      /// <summary>
      /// Delete a resource from coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.DropResourceResponse> DropResourceAsync(global::Ydb.RateLimiter.DropResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a resource from coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.DropResourceResponse> DropResourceAsync(global::Ydb.RateLimiter.DropResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropResource, null, options, request);
      }
      /// <summary>
      /// List resources in given coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.ListResourcesResponse ListResources(global::Ydb.RateLimiter.ListResourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List resources in given coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.ListResourcesResponse ListResources(global::Ydb.RateLimiter.ListResourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListResources, null, options, request);
      }
      /// <summary>
      /// List resources in given coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.ListResourcesResponse> ListResourcesAsync(global::Ydb.RateLimiter.ListResourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListResourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List resources in given coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.ListResourcesResponse> ListResourcesAsync(global::Ydb.RateLimiter.ListResourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListResources, null, options, request);
      }
      /// <summary>
      /// Describe properties of resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.DescribeResourceResponse DescribeResource(global::Ydb.RateLimiter.DescribeResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe properties of resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.DescribeResourceResponse DescribeResource(global::Ydb.RateLimiter.DescribeResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeResource, null, options, request);
      }
      /// <summary>
      /// Describe properties of resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.DescribeResourceResponse> DescribeResourceAsync(global::Ydb.RateLimiter.DescribeResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe properties of resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.DescribeResourceResponse> DescribeResourceAsync(global::Ydb.RateLimiter.DescribeResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeResource, null, options, request);
      }
      /// <summary>
      /// Take units for usage of a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.AcquireResourceResponse AcquireResource(global::Ydb.RateLimiter.AcquireResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireResource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Take units for usage of a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.RateLimiter.AcquireResourceResponse AcquireResource(global::Ydb.RateLimiter.AcquireResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcquireResource, null, options, request);
      }
      /// <summary>
      /// Take units for usage of a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.AcquireResourceResponse> AcquireResourceAsync(global::Ydb.RateLimiter.AcquireResourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireResourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Take units for usage of a resource in coordination node.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.RateLimiter.AcquireResourceResponse> AcquireResourceAsync(global::Ydb.RateLimiter.AcquireResourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcquireResource, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RateLimiterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RateLimiterServiceClient(configuration);
      }
    }

  }
}
#endregion
