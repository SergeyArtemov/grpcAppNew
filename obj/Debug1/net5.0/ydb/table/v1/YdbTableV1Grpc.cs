// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Ydb/Table/V1/ydb_table_v1.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ydb.Table.V1 {
  public static partial class TableService
  {
    static readonly string __ServiceName = "Ydb.Table.V1.TableService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Ydb.Table.CreateSessionRequest> __Marshaller_Ydb_Table_CreateSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CreateSessionRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CreateSessionResponse> __Marshaller_Ydb_Table_CreateSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CreateSessionResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DeleteSessionRequest> __Marshaller_Ydb_Table_DeleteSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DeleteSessionRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DeleteSessionResponse> __Marshaller_Ydb_Table_DeleteSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DeleteSessionResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.KeepAliveRequest> __Marshaller_Ydb_Table_KeepAliveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.KeepAliveRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.KeepAliveResponse> __Marshaller_Ydb_Table_KeepAliveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.KeepAliveResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CreateTableRequest> __Marshaller_Ydb_Table_CreateTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CreateTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CreateTableResponse> __Marshaller_Ydb_Table_CreateTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CreateTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DropTableRequest> __Marshaller_Ydb_Table_DropTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DropTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DropTableResponse> __Marshaller_Ydb_Table_DropTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DropTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.AlterTableRequest> __Marshaller_Ydb_Table_AlterTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.AlterTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.AlterTableResponse> __Marshaller_Ydb_Table_AlterTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.AlterTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CopyTableRequest> __Marshaller_Ydb_Table_CopyTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CopyTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CopyTableResponse> __Marshaller_Ydb_Table_CopyTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CopyTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CopyTablesRequest> __Marshaller_Ydb_Table_CopyTablesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CopyTablesRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CopyTablesResponse> __Marshaller_Ydb_Table_CopyTablesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CopyTablesResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DescribeTableRequest> __Marshaller_Ydb_Table_DescribeTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DescribeTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DescribeTableResponse> __Marshaller_Ydb_Table_DescribeTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DescribeTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExplainDataQueryRequest> __Marshaller_Ydb_Table_ExplainDataQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExplainDataQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExplainDataQueryResponse> __Marshaller_Ydb_Table_ExplainDataQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExplainDataQueryResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.PrepareDataQueryRequest> __Marshaller_Ydb_Table_PrepareDataQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.PrepareDataQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.PrepareDataQueryResponse> __Marshaller_Ydb_Table_PrepareDataQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.PrepareDataQueryResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteDataQueryRequest> __Marshaller_Ydb_Table_ExecuteDataQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteDataQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteDataQueryResponse> __Marshaller_Ydb_Table_ExecuteDataQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteDataQueryResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteSchemeQueryRequest> __Marshaller_Ydb_Table_ExecuteSchemeQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteSchemeQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteSchemeQueryResponse> __Marshaller_Ydb_Table_ExecuteSchemeQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteSchemeQueryResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.BeginTransactionRequest> __Marshaller_Ydb_Table_BeginTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.BeginTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.BeginTransactionResponse> __Marshaller_Ydb_Table_BeginTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.BeginTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CommitTransactionRequest> __Marshaller_Ydb_Table_CommitTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CommitTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.CommitTransactionResponse> __Marshaller_Ydb_Table_CommitTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.CommitTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.RollbackTransactionRequest> __Marshaller_Ydb_Table_RollbackTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.RollbackTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.RollbackTransactionResponse> __Marshaller_Ydb_Table_RollbackTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.RollbackTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DescribeTableOptionsRequest> __Marshaller_Ydb_Table_DescribeTableOptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DescribeTableOptionsRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.DescribeTableOptionsResponse> __Marshaller_Ydb_Table_DescribeTableOptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.DescribeTableOptionsResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ReadTableRequest> __Marshaller_Ydb_Table_ReadTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ReadTableRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ReadTableResponse> __Marshaller_Ydb_Table_ReadTableResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ReadTableResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.BulkUpsertRequest> __Marshaller_Ydb_Table_BulkUpsertRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.BulkUpsertRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.BulkUpsertResponse> __Marshaller_Ydb_Table_BulkUpsertResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.BulkUpsertResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteScanQueryRequest> __Marshaller_Ydb_Table_ExecuteScanQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteScanQueryRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Table.ExecuteScanQueryPartialResponse> __Marshaller_Ydb_Table_ExecuteScanQueryPartialResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Table.ExecuteScanQueryPartialResponse.Parser));

    static readonly grpc::Method<global::Ydb.Table.CreateSessionRequest, global::Ydb.Table.CreateSessionResponse> __Method_CreateSession = new grpc::Method<global::Ydb.Table.CreateSessionRequest, global::Ydb.Table.CreateSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_Ydb_Table_CreateSessionRequest,
        __Marshaller_Ydb_Table_CreateSessionResponse);

    static readonly grpc::Method<global::Ydb.Table.DeleteSessionRequest, global::Ydb.Table.DeleteSessionResponse> __Method_DeleteSession = new grpc::Method<global::Ydb.Table.DeleteSessionRequest, global::Ydb.Table.DeleteSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSession",
        __Marshaller_Ydb_Table_DeleteSessionRequest,
        __Marshaller_Ydb_Table_DeleteSessionResponse);

    static readonly grpc::Method<global::Ydb.Table.KeepAliveRequest, global::Ydb.Table.KeepAliveResponse> __Method_KeepAlive = new grpc::Method<global::Ydb.Table.KeepAliveRequest, global::Ydb.Table.KeepAliveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KeepAlive",
        __Marshaller_Ydb_Table_KeepAliveRequest,
        __Marshaller_Ydb_Table_KeepAliveResponse);

    static readonly grpc::Method<global::Ydb.Table.CreateTableRequest, global::Ydb.Table.CreateTableResponse> __Method_CreateTable = new grpc::Method<global::Ydb.Table.CreateTableRequest, global::Ydb.Table.CreateTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTable",
        __Marshaller_Ydb_Table_CreateTableRequest,
        __Marshaller_Ydb_Table_CreateTableResponse);

    static readonly grpc::Method<global::Ydb.Table.DropTableRequest, global::Ydb.Table.DropTableResponse> __Method_DropTable = new grpc::Method<global::Ydb.Table.DropTableRequest, global::Ydb.Table.DropTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DropTable",
        __Marshaller_Ydb_Table_DropTableRequest,
        __Marshaller_Ydb_Table_DropTableResponse);

    static readonly grpc::Method<global::Ydb.Table.AlterTableRequest, global::Ydb.Table.AlterTableResponse> __Method_AlterTable = new grpc::Method<global::Ydb.Table.AlterTableRequest, global::Ydb.Table.AlterTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AlterTable",
        __Marshaller_Ydb_Table_AlterTableRequest,
        __Marshaller_Ydb_Table_AlterTableResponse);

    static readonly grpc::Method<global::Ydb.Table.CopyTableRequest, global::Ydb.Table.CopyTableResponse> __Method_CopyTable = new grpc::Method<global::Ydb.Table.CopyTableRequest, global::Ydb.Table.CopyTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyTable",
        __Marshaller_Ydb_Table_CopyTableRequest,
        __Marshaller_Ydb_Table_CopyTableResponse);

    static readonly grpc::Method<global::Ydb.Table.CopyTablesRequest, global::Ydb.Table.CopyTablesResponse> __Method_CopyTables = new grpc::Method<global::Ydb.Table.CopyTablesRequest, global::Ydb.Table.CopyTablesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyTables",
        __Marshaller_Ydb_Table_CopyTablesRequest,
        __Marshaller_Ydb_Table_CopyTablesResponse);

    static readonly grpc::Method<global::Ydb.Table.DescribeTableRequest, global::Ydb.Table.DescribeTableResponse> __Method_DescribeTable = new grpc::Method<global::Ydb.Table.DescribeTableRequest, global::Ydb.Table.DescribeTableResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeTable",
        __Marshaller_Ydb_Table_DescribeTableRequest,
        __Marshaller_Ydb_Table_DescribeTableResponse);

    static readonly grpc::Method<global::Ydb.Table.ExplainDataQueryRequest, global::Ydb.Table.ExplainDataQueryResponse> __Method_ExplainDataQuery = new grpc::Method<global::Ydb.Table.ExplainDataQueryRequest, global::Ydb.Table.ExplainDataQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExplainDataQuery",
        __Marshaller_Ydb_Table_ExplainDataQueryRequest,
        __Marshaller_Ydb_Table_ExplainDataQueryResponse);

    static readonly grpc::Method<global::Ydb.Table.PrepareDataQueryRequest, global::Ydb.Table.PrepareDataQueryResponse> __Method_PrepareDataQuery = new grpc::Method<global::Ydb.Table.PrepareDataQueryRequest, global::Ydb.Table.PrepareDataQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareDataQuery",
        __Marshaller_Ydb_Table_PrepareDataQueryRequest,
        __Marshaller_Ydb_Table_PrepareDataQueryResponse);

    static readonly grpc::Method<global::Ydb.Table.ExecuteDataQueryRequest, global::Ydb.Table.ExecuteDataQueryResponse> __Method_ExecuteDataQuery = new grpc::Method<global::Ydb.Table.ExecuteDataQueryRequest, global::Ydb.Table.ExecuteDataQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteDataQuery",
        __Marshaller_Ydb_Table_ExecuteDataQueryRequest,
        __Marshaller_Ydb_Table_ExecuteDataQueryResponse);

    static readonly grpc::Method<global::Ydb.Table.ExecuteSchemeQueryRequest, global::Ydb.Table.ExecuteSchemeQueryResponse> __Method_ExecuteSchemeQuery = new grpc::Method<global::Ydb.Table.ExecuteSchemeQueryRequest, global::Ydb.Table.ExecuteSchemeQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteSchemeQuery",
        __Marshaller_Ydb_Table_ExecuteSchemeQueryRequest,
        __Marshaller_Ydb_Table_ExecuteSchemeQueryResponse);

    static readonly grpc::Method<global::Ydb.Table.BeginTransactionRequest, global::Ydb.Table.BeginTransactionResponse> __Method_BeginTransaction = new grpc::Method<global::Ydb.Table.BeginTransactionRequest, global::Ydb.Table.BeginTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginTransaction",
        __Marshaller_Ydb_Table_BeginTransactionRequest,
        __Marshaller_Ydb_Table_BeginTransactionResponse);

    static readonly grpc::Method<global::Ydb.Table.CommitTransactionRequest, global::Ydb.Table.CommitTransactionResponse> __Method_CommitTransaction = new grpc::Method<global::Ydb.Table.CommitTransactionRequest, global::Ydb.Table.CommitTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitTransaction",
        __Marshaller_Ydb_Table_CommitTransactionRequest,
        __Marshaller_Ydb_Table_CommitTransactionResponse);

    static readonly grpc::Method<global::Ydb.Table.RollbackTransactionRequest, global::Ydb.Table.RollbackTransactionResponse> __Method_RollbackTransaction = new grpc::Method<global::Ydb.Table.RollbackTransactionRequest, global::Ydb.Table.RollbackTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackTransaction",
        __Marshaller_Ydb_Table_RollbackTransactionRequest,
        __Marshaller_Ydb_Table_RollbackTransactionResponse);

    static readonly grpc::Method<global::Ydb.Table.DescribeTableOptionsRequest, global::Ydb.Table.DescribeTableOptionsResponse> __Method_DescribeTableOptions = new grpc::Method<global::Ydb.Table.DescribeTableOptionsRequest, global::Ydb.Table.DescribeTableOptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeTableOptions",
        __Marshaller_Ydb_Table_DescribeTableOptionsRequest,
        __Marshaller_Ydb_Table_DescribeTableOptionsResponse);

    static readonly grpc::Method<global::Ydb.Table.ReadTableRequest, global::Ydb.Table.ReadTableResponse> __Method_StreamReadTable = new grpc::Method<global::Ydb.Table.ReadTableRequest, global::Ydb.Table.ReadTableResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamReadTable",
        __Marshaller_Ydb_Table_ReadTableRequest,
        __Marshaller_Ydb_Table_ReadTableResponse);

    static readonly grpc::Method<global::Ydb.Table.BulkUpsertRequest, global::Ydb.Table.BulkUpsertResponse> __Method_BulkUpsert = new grpc::Method<global::Ydb.Table.BulkUpsertRequest, global::Ydb.Table.BulkUpsertResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkUpsert",
        __Marshaller_Ydb_Table_BulkUpsertRequest,
        __Marshaller_Ydb_Table_BulkUpsertResponse);

    static readonly grpc::Method<global::Ydb.Table.ExecuteScanQueryRequest, global::Ydb.Table.ExecuteScanQueryPartialResponse> __Method_StreamExecuteScanQuery = new grpc::Method<global::Ydb.Table.ExecuteScanQueryRequest, global::Ydb.Table.ExecuteScanQueryPartialResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamExecuteScanQuery",
        __Marshaller_Ydb_Table_ExecuteScanQueryRequest,
        __Marshaller_Ydb_Table_ExecuteScanQueryPartialResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ydb.Table.V1.YdbTableV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for TableService</summary>
    public partial class TableServiceClient : grpc::ClientBase<TableServiceClient>
    {
      /// <summary>Creates a new client for TableService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TableServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TableService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TableServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TableServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TableServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create new session. Implicit session creation is forbidden,
      /// so user must create new session before execute any query,
      /// otherwise BAD_SESSION status will be returned.
      /// Simultaneous execution of requests are forbiden.
      /// Sessions are volatile, can be invalidated by server, for example in case
      /// of fatal errors. All requests with this session will fail with BAD_SESSION status.
      /// So, client must be able to handle BAD_SESSION status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CreateSessionResponse CreateSession(global::Ydb.Table.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create new session. Implicit session creation is forbidden,
      /// so user must create new session before execute any query,
      /// otherwise BAD_SESSION status will be returned.
      /// Simultaneous execution of requests are forbiden.
      /// Sessions are volatile, can be invalidated by server, for example in case
      /// of fatal errors. All requests with this session will fail with BAD_SESSION status.
      /// So, client must be able to handle BAD_SESSION status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CreateSessionResponse CreateSession(global::Ydb.Table.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Create new session. Implicit session creation is forbidden,
      /// so user must create new session before execute any query,
      /// otherwise BAD_SESSION status will be returned.
      /// Simultaneous execution of requests are forbiden.
      /// Sessions are volatile, can be invalidated by server, for example in case
      /// of fatal errors. All requests with this session will fail with BAD_SESSION status.
      /// So, client must be able to handle BAD_SESSION status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CreateSessionResponse> CreateSessionAsync(global::Ydb.Table.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create new session. Implicit session creation is forbidden,
      /// so user must create new session before execute any query,
      /// otherwise BAD_SESSION status will be returned.
      /// Simultaneous execution of requests are forbiden.
      /// Sessions are volatile, can be invalidated by server, for example in case
      /// of fatal errors. All requests with this session will fail with BAD_SESSION status.
      /// So, client must be able to handle BAD_SESSION status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CreateSessionResponse> CreateSessionAsync(global::Ydb.Table.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DeleteSessionResponse DeleteSession(global::Ydb.Table.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DeleteSessionResponse DeleteSession(global::Ydb.Table.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DeleteSessionResponse> DeleteSessionAsync(global::Ydb.Table.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DeleteSessionResponse> DeleteSessionAsync(global::Ydb.Table.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Idle sessions can be kept alive by calling KeepAlive periodically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.KeepAliveResponse KeepAlive(global::Ydb.Table.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAlive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Idle sessions can be kept alive by calling KeepAlive periodically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.KeepAliveResponse KeepAlive(global::Ydb.Table.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>
      /// Idle sessions can be kept alive by calling KeepAlive periodically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.KeepAliveResponse> KeepAliveAsync(global::Ydb.Table.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAliveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Idle sessions can be kept alive by calling KeepAlive periodically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.KeepAliveResponse> KeepAliveAsync(global::Ydb.Table.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>
      /// Creates new table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CreateTableResponse CreateTable(global::Ydb.Table.CreateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CreateTableResponse CreateTable(global::Ydb.Table.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// Creates new table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CreateTableResponse> CreateTableAsync(global::Ydb.Table.CreateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CreateTableResponse> CreateTableAsync(global::Ydb.Table.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// Drop table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DropTableResponse DropTable(global::Ydb.Table.DropTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drop table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DropTableResponse DropTable(global::Ydb.Table.DropTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropTable, null, options, request);
      }
      /// <summary>
      /// Drop table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DropTableResponse> DropTableAsync(global::Ydb.Table.DropTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drop table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DropTableResponse> DropTableAsync(global::Ydb.Table.DropTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropTable, null, options, request);
      }
      /// <summary>
      /// Modifies schema of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.AlterTableResponse AlterTable(global::Ydb.Table.AlterTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies schema of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.AlterTableResponse AlterTable(global::Ydb.Table.AlterTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AlterTable, null, options, request);
      }
      /// <summary>
      /// Modifies schema of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.AlterTableResponse> AlterTableAsync(global::Ydb.Table.AlterTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies schema of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.AlterTableResponse> AlterTableAsync(global::Ydb.Table.AlterTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AlterTable, null, options, request);
      }
      /// <summary>
      /// Creates copy of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CopyTableResponse CopyTable(global::Ydb.Table.CopyTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates copy of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CopyTableResponse CopyTable(global::Ydb.Table.CopyTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyTable, null, options, request);
      }
      /// <summary>
      /// Creates copy of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CopyTableResponse> CopyTableAsync(global::Ydb.Table.CopyTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates copy of given table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CopyTableResponse> CopyTableAsync(global::Ydb.Table.CopyTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyTable, null, options, request);
      }
      /// <summary>
      /// Creates consistent copy of given tables.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CopyTablesResponse CopyTables(global::Ydb.Table.CopyTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyTables(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates consistent copy of given tables.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CopyTablesResponse CopyTables(global::Ydb.Table.CopyTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyTables, null, options, request);
      }
      /// <summary>
      /// Creates consistent copy of given tables.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CopyTablesResponse> CopyTablesAsync(global::Ydb.Table.CopyTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyTablesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates consistent copy of given tables.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CopyTablesResponse> CopyTablesAsync(global::Ydb.Table.CopyTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyTables, null, options, request);
      }
      /// <summary>
      /// Returns information about given table (metadata).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DescribeTableResponse DescribeTable(global::Ydb.Table.DescribeTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information about given table (metadata).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DescribeTableResponse DescribeTable(global::Ydb.Table.DescribeTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeTable, null, options, request);
      }
      /// <summary>
      /// Returns information about given table (metadata).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DescribeTableResponse> DescribeTableAsync(global::Ydb.Table.DescribeTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information about given table (metadata).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DescribeTableResponse> DescribeTableAsync(global::Ydb.Table.DescribeTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeTable, null, options, request);
      }
      /// <summary>
      /// Explains data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExplainDataQueryResponse ExplainDataQuery(global::Ydb.Table.ExplainDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExplainDataQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Explains data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExplainDataQueryResponse ExplainDataQuery(global::Ydb.Table.ExplainDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExplainDataQuery, null, options, request);
      }
      /// <summary>
      /// Explains data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExplainDataQueryResponse> ExplainDataQueryAsync(global::Ydb.Table.ExplainDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExplainDataQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Explains data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExplainDataQueryResponse> ExplainDataQueryAsync(global::Ydb.Table.ExplainDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExplainDataQuery, null, options, request);
      }
      /// <summary>
      /// Prepares data query, returns query id.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.PrepareDataQueryResponse PrepareDataQuery(global::Ydb.Table.PrepareDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareDataQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Prepares data query, returns query id.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.PrepareDataQueryResponse PrepareDataQuery(global::Ydb.Table.PrepareDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareDataQuery, null, options, request);
      }
      /// <summary>
      /// Prepares data query, returns query id.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.PrepareDataQueryResponse> PrepareDataQueryAsync(global::Ydb.Table.PrepareDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareDataQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Prepares data query, returns query id.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.PrepareDataQueryResponse> PrepareDataQueryAsync(global::Ydb.Table.PrepareDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareDataQuery, null, options, request);
      }
      /// <summary>
      /// Executes data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExecuteDataQueryResponse ExecuteDataQuery(global::Ydb.Table.ExecuteDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteDataQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExecuteDataQueryResponse ExecuteDataQuery(global::Ydb.Table.ExecuteDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteDataQuery, null, options, request);
      }
      /// <summary>
      /// Executes data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExecuteDataQueryResponse> ExecuteDataQueryAsync(global::Ydb.Table.ExecuteDataQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteDataQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes data query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExecuteDataQueryResponse> ExecuteDataQueryAsync(global::Ydb.Table.ExecuteDataQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteDataQuery, null, options, request);
      }
      /// <summary>
      /// Executes scheme query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExecuteSchemeQueryResponse ExecuteSchemeQuery(global::Ydb.Table.ExecuteSchemeQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteSchemeQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes scheme query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.ExecuteSchemeQueryResponse ExecuteSchemeQuery(global::Ydb.Table.ExecuteSchemeQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteSchemeQuery, null, options, request);
      }
      /// <summary>
      /// Executes scheme query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExecuteSchemeQueryResponse> ExecuteSchemeQueryAsync(global::Ydb.Table.ExecuteSchemeQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteSchemeQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes scheme query.
      /// SessionId of previously created session must be provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.ExecuteSchemeQueryResponse> ExecuteSchemeQueryAsync(global::Ydb.Table.ExecuteSchemeQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteSchemeQuery, null, options, request);
      }
      /// <summary>
      /// Begins new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.BeginTransactionResponse BeginTransaction(global::Ydb.Table.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.BeginTransactionResponse BeginTransaction(global::Ydb.Table.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Begins new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.BeginTransactionResponse> BeginTransactionAsync(global::Ydb.Table.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.BeginTransactionResponse> BeginTransactionAsync(global::Ydb.Table.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Commits specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CommitTransactionResponse CommitTransaction(global::Ydb.Table.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.CommitTransactionResponse CommitTransaction(global::Ydb.Table.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      /// <summary>
      /// Commits specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CommitTransactionResponse> CommitTransactionAsync(global::Ydb.Table.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.CommitTransactionResponse> CommitTransactionAsync(global::Ydb.Table.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      /// <summary>
      /// Performs a rollback of the specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.RollbackTransactionResponse RollbackTransaction(global::Ydb.Table.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a rollback of the specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.RollbackTransactionResponse RollbackTransaction(global::Ydb.Table.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackTransaction, null, options, request);
      }
      /// <summary>
      /// Performs a rollback of the specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.RollbackTransactionResponse> RollbackTransactionAsync(global::Ydb.Table.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a rollback of the specified active transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.RollbackTransactionResponse> RollbackTransactionAsync(global::Ydb.Table.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackTransaction, null, options, request);
      }
      /// <summary>
      /// Describe supported table options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DescribeTableOptionsResponse DescribeTableOptions(global::Ydb.Table.DescribeTableOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTableOptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe supported table options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.DescribeTableOptionsResponse DescribeTableOptions(global::Ydb.Table.DescribeTableOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeTableOptions, null, options, request);
      }
      /// <summary>
      /// Describe supported table options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DescribeTableOptionsResponse> DescribeTableOptionsAsync(global::Ydb.Table.DescribeTableOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTableOptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe supported table options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.DescribeTableOptionsResponse> DescribeTableOptionsAsync(global::Ydb.Table.DescribeTableOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeTableOptions, null, options, request);
      }
      /// <summary>
      /// Streaming read table
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ydb.Table.ReadTableResponse> StreamReadTable(global::Ydb.Table.ReadTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamReadTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streaming read table
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ydb.Table.ReadTableResponse> StreamReadTable(global::Ydb.Table.ReadTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamReadTable, null, options, request);
      }
      /// <summary>
      /// Upserts a batch of rows non-transactionally.
      /// Returns success only when all rows were successfully upserted. In case of an error some rows might
      /// be upserted and some might not.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.BulkUpsertResponse BulkUpsert(global::Ydb.Table.BulkUpsertRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkUpsert(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upserts a batch of rows non-transactionally.
      /// Returns success only when all rows were successfully upserted. In case of an error some rows might
      /// be upserted and some might not.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Table.BulkUpsertResponse BulkUpsert(global::Ydb.Table.BulkUpsertRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkUpsert, null, options, request);
      }
      /// <summary>
      /// Upserts a batch of rows non-transactionally.
      /// Returns success only when all rows were successfully upserted. In case of an error some rows might
      /// be upserted and some might not.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.BulkUpsertResponse> BulkUpsertAsync(global::Ydb.Table.BulkUpsertRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkUpsertAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upserts a batch of rows non-transactionally.
      /// Returns success only when all rows were successfully upserted. In case of an error some rows might
      /// be upserted and some might not.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Table.BulkUpsertResponse> BulkUpsertAsync(global::Ydb.Table.BulkUpsertRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkUpsert, null, options, request);
      }
      /// <summary>
      /// Executes scan query with streaming result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ydb.Table.ExecuteScanQueryPartialResponse> StreamExecuteScanQuery(global::Ydb.Table.ExecuteScanQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamExecuteScanQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes scan query with streaming result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Ydb.Table.ExecuteScanQueryPartialResponse> StreamExecuteScanQuery(global::Ydb.Table.ExecuteScanQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamExecuteScanQuery, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TableServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TableServiceClient(configuration);
      }
    }

  }
}
#endregion
