// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Ydb/Cms/V1/ydb_cms_v1.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ydb.Cms.V1 {
  public static partial class CmsService
  {
    static readonly string __ServiceName = "Ydb.Cms.V1.CmsService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Ydb.Cms.CreateDatabaseRequest> __Marshaller_Ydb_Cms_CreateDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.CreateDatabaseRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.CreateDatabaseResponse> __Marshaller_Ydb_Cms_CreateDatabaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.CreateDatabaseResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.GetDatabaseStatusRequest> __Marshaller_Ydb_Cms_GetDatabaseStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.GetDatabaseStatusRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.GetDatabaseStatusResponse> __Marshaller_Ydb_Cms_GetDatabaseStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.GetDatabaseStatusResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.AlterDatabaseRequest> __Marshaller_Ydb_Cms_AlterDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.AlterDatabaseRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.AlterDatabaseResponse> __Marshaller_Ydb_Cms_AlterDatabaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.AlterDatabaseResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.ListDatabasesRequest> __Marshaller_Ydb_Cms_ListDatabasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.ListDatabasesRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.ListDatabasesResponse> __Marshaller_Ydb_Cms_ListDatabasesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.ListDatabasesResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.RemoveDatabaseRequest> __Marshaller_Ydb_Cms_RemoveDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.RemoveDatabaseRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.RemoveDatabaseResponse> __Marshaller_Ydb_Cms_RemoveDatabaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.RemoveDatabaseResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.DescribeDatabaseOptionsRequest> __Marshaller_Ydb_Cms_DescribeDatabaseOptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.DescribeDatabaseOptionsRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Cms.DescribeDatabaseOptionsResponse> __Marshaller_Ydb_Cms_DescribeDatabaseOptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Cms.DescribeDatabaseOptionsResponse.Parser));

    static readonly grpc::Method<global::Ydb.Cms.CreateDatabaseRequest, global::Ydb.Cms.CreateDatabaseResponse> __Method_CreateDatabase = new grpc::Method<global::Ydb.Cms.CreateDatabaseRequest, global::Ydb.Cms.CreateDatabaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_Ydb_Cms_CreateDatabaseRequest,
        __Marshaller_Ydb_Cms_CreateDatabaseResponse);

    static readonly grpc::Method<global::Ydb.Cms.GetDatabaseStatusRequest, global::Ydb.Cms.GetDatabaseStatusResponse> __Method_GetDatabaseStatus = new grpc::Method<global::Ydb.Cms.GetDatabaseStatusRequest, global::Ydb.Cms.GetDatabaseStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabaseStatus",
        __Marshaller_Ydb_Cms_GetDatabaseStatusRequest,
        __Marshaller_Ydb_Cms_GetDatabaseStatusResponse);

    static readonly grpc::Method<global::Ydb.Cms.AlterDatabaseRequest, global::Ydb.Cms.AlterDatabaseResponse> __Method_AlterDatabase = new grpc::Method<global::Ydb.Cms.AlterDatabaseRequest, global::Ydb.Cms.AlterDatabaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AlterDatabase",
        __Marshaller_Ydb_Cms_AlterDatabaseRequest,
        __Marshaller_Ydb_Cms_AlterDatabaseResponse);

    static readonly grpc::Method<global::Ydb.Cms.ListDatabasesRequest, global::Ydb.Cms.ListDatabasesResponse> __Method_ListDatabases = new grpc::Method<global::Ydb.Cms.ListDatabasesRequest, global::Ydb.Cms.ListDatabasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatabases",
        __Marshaller_Ydb_Cms_ListDatabasesRequest,
        __Marshaller_Ydb_Cms_ListDatabasesResponse);

    static readonly grpc::Method<global::Ydb.Cms.RemoveDatabaseRequest, global::Ydb.Cms.RemoveDatabaseResponse> __Method_RemoveDatabase = new grpc::Method<global::Ydb.Cms.RemoveDatabaseRequest, global::Ydb.Cms.RemoveDatabaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveDatabase",
        __Marshaller_Ydb_Cms_RemoveDatabaseRequest,
        __Marshaller_Ydb_Cms_RemoveDatabaseResponse);

    static readonly grpc::Method<global::Ydb.Cms.DescribeDatabaseOptionsRequest, global::Ydb.Cms.DescribeDatabaseOptionsResponse> __Method_DescribeDatabaseOptions = new grpc::Method<global::Ydb.Cms.DescribeDatabaseOptionsRequest, global::Ydb.Cms.DescribeDatabaseOptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeDatabaseOptions",
        __Marshaller_Ydb_Cms_DescribeDatabaseOptionsRequest,
        __Marshaller_Ydb_Cms_DescribeDatabaseOptionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ydb.Cms.V1.YdbCmsV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for CmsService</summary>
    public partial class CmsServiceClient : grpc::ClientBase<CmsServiceClient>
    {
      /// <summary>Creates a new client for CmsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CmsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CmsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CmsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CmsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CmsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.CreateDatabaseResponse CreateDatabase(global::Ydb.Cms.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.CreateDatabaseResponse CreateDatabase(global::Ydb.Cms.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Create a new database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.CreateDatabaseResponse> CreateDatabaseAsync(global::Ydb.Cms.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.CreateDatabaseResponse> CreateDatabaseAsync(global::Ydb.Cms.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Get current database's status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.GetDatabaseStatusResponse GetDatabaseStatus(global::Ydb.Cms.GetDatabaseStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current database's status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.GetDatabaseStatusResponse GetDatabaseStatus(global::Ydb.Cms.GetDatabaseStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabaseStatus, null, options, request);
      }
      /// <summary>
      /// Get current database's status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.GetDatabaseStatusResponse> GetDatabaseStatusAsync(global::Ydb.Cms.GetDatabaseStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get current database's status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.GetDatabaseStatusResponse> GetDatabaseStatusAsync(global::Ydb.Cms.GetDatabaseStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabaseStatus, null, options, request);
      }
      /// <summary>
      /// Alter database resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.AlterDatabaseResponse AlterDatabase(global::Ydb.Cms.AlterDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Alter database resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.AlterDatabaseResponse AlterDatabase(global::Ydb.Cms.AlterDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AlterDatabase, null, options, request);
      }
      /// <summary>
      /// Alter database resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.AlterDatabaseResponse> AlterDatabaseAsync(global::Ydb.Cms.AlterDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AlterDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Alter database resources.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.AlterDatabaseResponse> AlterDatabaseAsync(global::Ydb.Cms.AlterDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AlterDatabase, null, options, request);
      }
      /// <summary>
      /// List all databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.ListDatabasesResponse ListDatabases(global::Ydb.Cms.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.ListDatabasesResponse ListDatabases(global::Ydb.Cms.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// List all databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.ListDatabasesResponse> ListDatabasesAsync(global::Ydb.Cms.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.ListDatabasesResponse> ListDatabasesAsync(global::Ydb.Cms.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// Remove database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.RemoveDatabaseResponse RemoveDatabase(global::Ydb.Cms.RemoveDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.RemoveDatabaseResponse RemoveDatabase(global::Ydb.Cms.RemoveDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveDatabase, null, options, request);
      }
      /// <summary>
      /// Remove database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.RemoveDatabaseResponse> RemoveDatabaseAsync(global::Ydb.Cms.RemoveDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.RemoveDatabaseResponse> RemoveDatabaseAsync(global::Ydb.Cms.RemoveDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveDatabase, null, options, request);
      }
      /// <summary>
      /// Describe supported database options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.DescribeDatabaseOptionsResponse DescribeDatabaseOptions(global::Ydb.Cms.DescribeDatabaseOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeDatabaseOptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe supported database options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Cms.DescribeDatabaseOptionsResponse DescribeDatabaseOptions(global::Ydb.Cms.DescribeDatabaseOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeDatabaseOptions, null, options, request);
      }
      /// <summary>
      /// Describe supported database options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.DescribeDatabaseOptionsResponse> DescribeDatabaseOptionsAsync(global::Ydb.Cms.DescribeDatabaseOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeDatabaseOptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describe supported database options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Cms.DescribeDatabaseOptionsResponse> DescribeDatabaseOptionsAsync(global::Ydb.Cms.DescribeDatabaseOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeDatabaseOptions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CmsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CmsServiceClient(configuration);
      }
    }

  }
}
#endregion
