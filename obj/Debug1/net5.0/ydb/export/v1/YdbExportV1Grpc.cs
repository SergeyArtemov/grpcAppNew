// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Ydb/Export/V1/ydb_export_v1.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ydb.Export.V1 {
  public static partial class ExportService
  {
    static readonly string __ServiceName = "Ydb.Export.V1.ExportService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Ydb.Export.ExportToYtRequest> __Marshaller_Ydb_Export_ExportToYtRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Export.ExportToYtRequest.Parser));
    static readonly grpc::Marshaller<global::Ydb.Export.ExportToYtResponse> __Marshaller_Ydb_Export_ExportToYtResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Export.ExportToYtResponse.Parser));
    static readonly grpc::Marshaller<global::Ydb.Export.ExportToS3Request> __Marshaller_Ydb_Export_ExportToS3Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Export.ExportToS3Request.Parser));
    static readonly grpc::Marshaller<global::Ydb.Export.ExportToS3Response> __Marshaller_Ydb_Export_ExportToS3Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ydb.Export.ExportToS3Response.Parser));

    static readonly grpc::Method<global::Ydb.Export.ExportToYtRequest, global::Ydb.Export.ExportToYtResponse> __Method_ExportToYt = new grpc::Method<global::Ydb.Export.ExportToYtRequest, global::Ydb.Export.ExportToYtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportToYt",
        __Marshaller_Ydb_Export_ExportToYtRequest,
        __Marshaller_Ydb_Export_ExportToYtResponse);

    static readonly grpc::Method<global::Ydb.Export.ExportToS3Request, global::Ydb.Export.ExportToS3Response> __Method_ExportToS3 = new grpc::Method<global::Ydb.Export.ExportToS3Request, global::Ydb.Export.ExportToS3Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportToS3",
        __Marshaller_Ydb_Export_ExportToS3Request,
        __Marshaller_Ydb_Export_ExportToS3Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ydb.Export.V1.YdbExportV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ExportService</summary>
    public partial class ExportServiceClient : grpc::ClientBase<ExportServiceClient>
    {
      /// <summary>Creates a new client for ExportService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ExportServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ExportService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ExportServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ExportServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ExportServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Exports data to YT.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Export.ExportToYtResponse ExportToYt(global::Ydb.Export.ExportToYtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportToYt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports data to YT.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Export.ExportToYtResponse ExportToYt(global::Ydb.Export.ExportToYtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportToYt, null, options, request);
      }
      /// <summary>
      /// Exports data to YT.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Export.ExportToYtResponse> ExportToYtAsync(global::Ydb.Export.ExportToYtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportToYtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports data to YT.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Export.ExportToYtResponse> ExportToYtAsync(global::Ydb.Export.ExportToYtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportToYt, null, options, request);
      }
      /// <summary>
      /// Exports data to S3.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Export.ExportToS3Response ExportToS3(global::Ydb.Export.ExportToS3Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportToS3(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports data to S3.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Ydb.Export.ExportToS3Response ExportToS3(global::Ydb.Export.ExportToS3Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportToS3, null, options, request);
      }
      /// <summary>
      /// Exports data to S3.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Export.ExportToS3Response> ExportToS3Async(global::Ydb.Export.ExportToS3Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportToS3Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports data to S3.
      /// Method starts an asynchronous operation that can be cancelled while it is in progress.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Ydb.Export.ExportToS3Response> ExportToS3Async(global::Ydb.Export.ExportToS3Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportToS3, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ExportServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ExportServiceClient(configuration);
      }
    }

  }
}
#endregion
